<!DOCTYPE html>
<html lang="kr">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Document</title>
        <script src="https://kit.fontawesome.com/8786e78429.js" crossorigin="anonymous"></script>
        <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
        <script type="text/javascript" src="https://openapi.map.naver.com/openapi/v3/maps.js?ncpClientId=ijdya8hea0"></script>

        <style>
            body {
                font-family: Arial, sans-serif;
                background-color: #f9f9f9;
                margin: 0;
                padding: 0;
            }
            #pictures {
                display: flex;
                justify-content: center;
                align-items: center;
            }

            .img--box {
                width: 300px;
                margin-left: 10px;
                margin-right: 10px;
            }

            .map {
                width: 700px;
                height: 350px;
                margin-top: 15px;
            }
            #main-title {
                text-align: center;
            }
            .img_container {
                display: flex;
                justify-content: space-evenly;
            }

            #body_container {
                margin-left: 5%;
                margin-right: 5%;
            }

            .mainComment {
            }
            .inputComment {
                margin-top: 20px;
                border: 1px solid #ccc;
                border-radius: 5px;
                padding: 10px;
                background-color: #fff;
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
                margin-bottom: 20px;
            }

            .inputComment span {
                font-weight: bold;
                margin-right: 10px;
            }

            .inputComment input[type='text'] {
                width: calc(100% - 120px);
                padding: 5px;
                border: 1px solid #ccc;
                border-radius: 3px;
            }

            .inputComment button {
                width: 60px;
                padding: 5px;
                background-color: #43604d;
                color: #fff;
                border: none;
                border-radius: 3px;
                cursor: pointer;
                font-size: 14px;
            }

            .inputComment button:hover {
                background-color: #43604d;
            }
        </style>
    </head>
    <body>
        <%-include('header.ejs')%>
        <br />
        <br />
        <br />
        <br />
        <br />
        <!-- user.name -->
        <div id="body_container">
            <h2 id="main-title"><%= userInfo.username %>님의 캠핑스팟</h2>
            <!-- 사진넘기기-->
            <div class="img_container">
                <div id="pictures">
                    <i class="fa-solid fa-arrow-left" onclick="left()"></i>
                    <img id="img-box" class="img--box" src="<%= imgurl.urls[0] %>" />
                    <i class="fa-solid fa-arrow-right" onclick="right()"></i>
                </div>
                <!-- 지도 -->
                <div class="map-container">
                    <div class="map" id="map"></div>
                </div>
            </div>

            <!-- 본문 -->
            <h3>
                본문
                <div><%= data.mainText %></div>
            </h3>
            <hr />
            <button onclick="delReview()">삭제</button>
            <button onclick="changeReview()">수정</button>
            <!-- 댓글-->
            <hr />
            <div class="commentView">
                <div>
                    <!-- 여기에 대댓글을 추가할 수 있는 method가 필요하다. -->
                    <% for(let i=0; i< comments.length; i++){ %>
                    <div>
                        <%= comments[i].main.nickName %> : <%= comments[i].main.commentText %>
                        <button type="button" onclick="showSubComment('<%= i %>')">답글</button>
                        <button type="button" onclick="deleteComment('<%=comments[i].main.commentid %>',-1,'<%= data.galleryid %>')">댓글 삭제</button>

                        <br />
                        <br />
                        <form style="display: none" class="hideComment<%= i %>" name="maincomment<%= i %>">
                            <span>답글</span>
                            <input name="mainCommentInput" type="text" placeholder="댓글" />
                            <button type="button" onclick="addSubComment('<%=i %>','<%= data.galleryid %>','<%= comments[i].main.commentGroup %>','<%= comments[i].main.deepComment %>')">댓글입력</button>
                        </form>
                    </div>
                    <ul>
                        <!-- 여길 ejs에서 불러온 데이터만큼 반복한다. -->
                        <% for(let j=0; j < comments[i].sub.length; j++){ %>
                        <li><%= comments[i].sub[j].nickName %> : <%= comments[i].sub[j].commentText %></li>
                        <button type="button" onclick="deleteComment('<%=comments[i].main.commentid %>','<%= comments[i].sub[j].commentid %>','<%= data.galleryid %>')">댓글 삭제</button>
                        <% } %>
                    </ul>
                    <% } %>
                </div>
            </div>
            <div class="inputComment">
                <form name="maincomment" class="mainComment">
                    <span>댓글</span>
                    <input name="mainCommentInput" type="text" placeholder="댓글" />
                    <button type="button" onclick="addMainComment()">댓글입력</button>
                </form>
            </div>
        </div>

        <%-include('footer.ejs')%>

        <script>
            //지도 로직
            var results = JSON.parse('<%- JSON.stringify(data) %>').userlocations;
            console.log(results);
            //지도 초기 기준점 위치 설정
            const mapOptions = {
                center: new naver.maps.LatLng(36.626316, 127.936296),
                zoom: 7,
            };

            var map = new naver.maps.Map('map', mapOptions);
            //해당 지역의 차박 스팟 마커찍기 + 스팟리스트 출력
            var marker = [];
            var polyline = new naver.maps.Polyline({ map, path: [] });
            for (let i = 0; i < results.length; i++) {
                marker[i] = new naver.maps.Marker({
                    map: map,
                    position: new naver.maps.LatLng(results[i].lat, results[i].lon),
                });
                polyline.path.push(new naver.maps.LatLng(results[i].lat, results[i].lon));
            }

            // imgurl를 stringfy해준뒤에, 다시 parse해서 jsonobject를 만든다.
            // 나중에는 그냥 서버단에서 하는게 나을것같다.
            var imgurl = JSON.parse('<%- JSON.stringify(imgurl) %>').urls;

            console.log(typeof imgurl);
            console.log(imgurl);
            var currentImg = 0;

            var imgLength = imgurl.length;
            console.log(imgLength);
            function left() {
                console.log('left', currentImg);
                if (currentImg == 0) {
                    currentImg = imgLength - 1;
                } else {
                    currentImg--;
                }
                console.log(imgurl[currentImg]);
                document.querySelector('#img-box').src = imgurl[currentImg];
            }
            function right() {
                console.log('right', currentImg);
                if (currentImg == imgLength - 1) {
                    currentImg = 0;
                } else {
                    currentImg++;
                }
                console.log(imgurl, currentImg);
                document.querySelector('#img-box').src = imgurl[currentImg];
            }

            async function delReview() {
                const urlSearch = new URLSearchParams(location.search);
                const gid = urlSearch.get('galleryId');
                const result = await axios({
                    url: '/gallery/review/del',
                    method: 'delete',
                    data: { gid },
                });
                console.log(result);
                if (result.data.error == 'no error') {
                    alert('삭제완료');
                    location.href = '/';
                }
            }
            //수정을 눌렀을 떄
            async function changeReview() {
                const urlSearch = new URLSearchParams(location.search);
                const gid = urlSearch.get('galleryId');
                const result = await axios({
                    url: '/gallery/review/editCheck',
                    method: 'post',
                    data: { gid },
                });
                console.log(result.data.reviewInfo);
                if (result.data.errcode == 0) {
                    localStorage.setItem('galleryItems', JSON.stringify(result.data.reviewInfo));
                    location.href = '/gallery/reviewEdit?mode=1';
                } else {
                    alert(result.data.error);
                }
            }

            async function addMainComment() {
                const urlSearch = new URLSearchParams(location.search);
                const mode = urlSearch.get('galleryId');
                const maincomment = document.forms['maincomment'].mainCommentInput.value;
                console.log(maincomment);
                const result = await axios({
                    url: '/gallery/review/addMainComment',
                    data: {
                        maincomment,
                        gid: mode,
                    },
                    method: 'POST',
                });
                if (result.data.errcode == -2) {
                    alert('로그인이 되어있지 않습니다!');
                }
                if (result.data.errcode == 0) {
                    location.reload();
                }
            }

            async function deleteComment(main, sub, gid) {
                console.log('main :', main);
                console.log('sub :', sub);

                const result = await axios({
                    url: '/gallery/review/deleteComment',
                    data: {
                        main: main,
                        subid: sub,
                    },
                    method: 'POST',
                });
                if (result.data.errcode == 0) {
                    location.reload();
                }
            }
            async function addSubComment(i, gid, commentGroup, deepComment) {
                const urlSearch = new URLSearchParams(location.search);
                const mode = urlSearch.get('galleryId');
                let formString = 'maincomment' + i;
                const subcomment = document.forms[formString].mainCommentInput.value;
                const result = await axios({
                    url: '/gallery/review/addSubComment',
                    data: {
                        subcomment,
                        gid: mode,
                        commentGroup,
                        deepComment,
                    },
                    method: 'POST',
                });
                if (result.data.errcode == 0) {
                    location.reload();
                }
            }
            function showSubComment(idx) {
                const subcommentForm = document.querySelector(`.hideComment${idx}`);
                subcommentForm.style.display = 'block';
            }
        </script>
    </body>
</html>
